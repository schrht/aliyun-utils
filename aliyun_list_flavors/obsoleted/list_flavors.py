#!/usr/bin/env python3

# Description:
#   List flavors as CSV format.
#
# Dependence:
#   datasource_file - a json file generated by update_datasource.sh
#
# History:
#   v0.1  2019-04-17  charles.shih  init version

import os
import json

datasource = {}
datalist = []


def _update_datasource_file():
    os.system('update_datasource.sh')


def _load_datasource_file():
    datasource_file = '/tmp/aliyun_flavor_list_raw_data.json'
    with open(datasource_file, 'r', encoding='utf-8') as f:
        datasource = json.load(f)
    return datasource


def _parse_datasource(datasource):
    for az in datasource:
        az_id = az['ZoneId']

        # The AZ status should be Available
        if az['Status'] != 'Available':
            print('[WARNING] The status of AZ {0} is {1}'.format(
                az_id, az['Status']))
            continue

        # The Resource Type should be InstanceType
        resource = az['AvailableResources']['AvailableResource'][0]
        if resource['Type'] != 'InstanceType':
            print('[WARNING] The Type of the resource is {0}'.format(
                resource['Type']))
            continue

        flavors = resource['SupportedResources']['SupportedResource']
        for flavor in flavors:
            flavor_name = flavor['Value']
            flavor_status = flavor['Status']

            # Save the tuple (zone, flavor, status)
            datalist.append((az_id, flavor_name, flavor_status))


def _dump_flavor_list_csv():
    for datatuple in datalist:
        print('%s,%s,%s' % datatuple)


def list_flavors():
    """Load data from file, parse and print in csv format."""
    datasource = _load_datasource_file()
    _parse_datasource(datasource)
    _dump_flavor_list_csv()


if __name__ == '__main__':
    list_flavors()
